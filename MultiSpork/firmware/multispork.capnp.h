// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: multispork.capnp

#ifndef CAPNP_INCLUDED_f7d61418b03bac29_
#define CAPNP_INCLUDED_f7d61418b03bac29_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 4000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif



struct ParamStruct {
  ParamStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Value;
};

struct ParamStruct::Value {
  Value() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    SWITCH,
    SIGNED8,
    SIGNED16,
    SIGNED32,
    SIGNED64,
    UNSIGNED8,
    UNSIGNED16,
    UNSIGNED32,
    UNSIGNED64,
    FLOAT_NUM,
    DOUBLE_NUM,
    STRING_VAL,
    REQUEST,
  };
};

enum class ParamErr: uint16_t {
  NONE,
  INVALID_PARAM_NAME,
  INVALID_PARAM_G_U_I_D,
  INVALID_PARAM_VALUE,
  INVALID_PARAM_CHANNEL,
  ACCESS_DENIED,
  PARAM_SET_FAIL,
  INVALID_PARAM_TYPE,
};

struct IntStruct {
  IntStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BufID {
  BufID() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct BufStruct {
  BufStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

enum class BufErr: uint16_t {
  NONE,
  BUF_DOES_NOT_EXIST,
  BUF_EMPTY,
  BUF_OVERFLOW,
  BUF_WRITE_FAIL,
  INVALID_BUF_TYPE,
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_d8dfb6481d79fc32;
extern const ::capnp::_::RawSchema s_c4ba5429d1c2c1dc;
extern const ::capnp::_::RawSchema s_892ec862f1f1c9d8;
extern const ::capnp::_::RawSchema s_afb74a7228500f0d;
extern const ::capnp::_::RawSchema s_83b5ee3d2ecf2b34;
extern const ::capnp::_::RawSchema s_b51334c169f6b621;
extern const ::capnp::_::RawSchema s_a725f92eef37d3b0;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::ParamStruct, d8dfb6481d79fc32,
    3, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::ParamStruct::Value, c4ba5429d1c2c1dc,
    3, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_ENUM(
    ::ParamErr, 892ec862f1f1c9d8);
CAPNP_DECLARE_STRUCT(
    ::IntStruct, afb74a7228500f0d,
    2, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::BufID, 83b5ee3d2ecf2b34,
    3, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::BufStruct, b51334c169f6b621,
    0, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_ENUM(
    ::BufErr, a725f92eef37d3b0);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class ParamStruct::Reader {
public:
  typedef ParamStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint64_t getGuid() const;

  inline  ::uint8_t getChannel() const;

  inline Value::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ParamStruct::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(ParamStruct::Reader reader) {
  return ::capnp::_::structString<ParamStruct>(reader._reader);
}

class ParamStruct::Builder {
public:
  typedef ParamStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint64_t getGuid();
  inline void setGuid( ::uint64_t value);

  inline  ::uint8_t getChannel();
  inline void setChannel( ::uint8_t value);

  inline Value::Builder getValue();
  inline Value::Builder initValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ParamStruct::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(ParamStruct::Builder builder) {
  return ::capnp::_::structString<ParamStruct>(builder._builder.asReader());
}

class ParamStruct::Pipeline {
public:
  typedef ParamStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Value::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class ParamStruct::Value::Reader {
public:
  typedef Value Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline Which which() const;
  inline bool isSwitch() const;
  inline bool getSwitch() const;

  inline bool isSigned8() const;
  inline  ::int8_t getSigned8() const;

  inline bool isSigned16() const;
  inline  ::int16_t getSigned16() const;

  inline bool isSigned32() const;
  inline  ::int32_t getSigned32() const;

  inline bool isSigned64() const;
  inline  ::int64_t getSigned64() const;

  inline bool isUnsigned8() const;
  inline  ::uint8_t getUnsigned8() const;

  inline bool isUnsigned16() const;
  inline  ::uint16_t getUnsigned16() const;

  inline bool isUnsigned32() const;
  inline  ::uint32_t getUnsigned32() const;

  inline bool isUnsigned64() const;
  inline  ::uint64_t getUnsigned64() const;

  inline bool isFloatNum() const;
  inline float getFloatNum() const;

  inline bool isDoubleNum() const;
  inline double getDoubleNum() const;

  inline bool isStringVal() const;
  inline bool hasStringVal() const;
  inline  ::capnp::Text::Reader getStringVal() const;

  inline bool isRequest() const;
  inline  ::capnp::Void getRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ParamStruct::Value::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(ParamStruct::Value::Reader reader) {
  return ::capnp::_::structString<ParamStruct::Value>(reader._reader);
}

class ParamStruct::Value::Builder {
public:
  typedef Value Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline Which which();
  inline bool isSwitch();
  inline bool getSwitch();
  inline void setSwitch(bool value);

  inline bool isSigned8();
  inline  ::int8_t getSigned8();
  inline void setSigned8( ::int8_t value);

  inline bool isSigned16();
  inline  ::int16_t getSigned16();
  inline void setSigned16( ::int16_t value);

  inline bool isSigned32();
  inline  ::int32_t getSigned32();
  inline void setSigned32( ::int32_t value);

  inline bool isSigned64();
  inline  ::int64_t getSigned64();
  inline void setSigned64( ::int64_t value);

  inline bool isUnsigned8();
  inline  ::uint8_t getUnsigned8();
  inline void setUnsigned8( ::uint8_t value);

  inline bool isUnsigned16();
  inline  ::uint16_t getUnsigned16();
  inline void setUnsigned16( ::uint16_t value);

  inline bool isUnsigned32();
  inline  ::uint32_t getUnsigned32();
  inline void setUnsigned32( ::uint32_t value);

  inline bool isUnsigned64();
  inline  ::uint64_t getUnsigned64();
  inline void setUnsigned64( ::uint64_t value);

  inline bool isFloatNum();
  inline float getFloatNum();
  inline void setFloatNum(float value);

  inline bool isDoubleNum();
  inline double getDoubleNum();
  inline void setDoubleNum(double value);

  inline bool isStringVal();
  inline bool hasStringVal();
  inline  ::capnp::Text::Builder getStringVal();
  inline void setStringVal( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStringVal(unsigned int size);
  inline void adoptStringVal(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStringVal();

  inline bool isRequest();
  inline  ::capnp::Void getRequest();
  inline void setRequest( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(ParamStruct::Value::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(ParamStruct::Value::Builder builder) {
  return ::capnp::_::structString<ParamStruct::Value>(builder._builder.asReader());
}

class ParamStruct::Value::Pipeline {
public:
  typedef Value Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class IntStruct::Reader {
public:
  typedef IntStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint64_t getGuid() const;

  inline  ::uint8_t getChannel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(IntStruct::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(IntStruct::Reader reader) {
  return ::capnp::_::structString<IntStruct>(reader._reader);
}

class IntStruct::Builder {
public:
  typedef IntStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint64_t getGuid();
  inline void setGuid( ::uint64_t value);

  inline  ::uint8_t getChannel();
  inline void setChannel( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(IntStruct::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(IntStruct::Builder builder) {
  return ::capnp::_::structString<IntStruct>(builder._builder.asReader());
}

class IntStruct::Pipeline {
public:
  typedef IntStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BufID::Reader {
public:
  typedef BufID Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasChannels() const;
  inline  ::capnp::List< ::uint8_t>::Reader getChannels() const;

  inline float getRate() const;

  inline  ::uint64_t getStartTime() const;

  inline  ::uint32_t getSize() const;

  inline  ::uint8_t getResolution() const;

  inline bool getDirection() const;

  inline  ::uint32_t getContentSize() const;

  inline  ::uint8_t getBufNum() const;

  inline bool getActive() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BufID::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BufID::Reader reader) {
  return ::capnp::_::structString<BufID>(reader._reader);
}

class BufID::Builder {
public:
  typedef BufID Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasChannels();
  inline  ::capnp::List< ::uint8_t>::Builder getChannels();
  inline void setChannels( ::capnp::List< ::uint8_t>::Reader value);
  inline void setChannels(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initChannels(unsigned int size);
  inline void adoptChannels(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownChannels();

  inline float getRate();
  inline void setRate(float value);

  inline  ::uint64_t getStartTime();
  inline void setStartTime( ::uint64_t value);

  inline  ::uint32_t getSize();
  inline void setSize( ::uint32_t value);

  inline  ::uint8_t getResolution();
  inline void setResolution( ::uint8_t value);

  inline bool getDirection();
  inline void setDirection(bool value);

  inline  ::uint32_t getContentSize();
  inline void setContentSize( ::uint32_t value);

  inline  ::uint8_t getBufNum();
  inline void setBufNum( ::uint8_t value);

  inline bool getActive();
  inline void setActive(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BufID::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BufID::Builder builder) {
  return ::capnp::_::structString<BufID>(builder._builder.asReader());
}

class BufID::Pipeline {
public:
  typedef BufID Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class BufStruct::Reader {
public:
  typedef BufStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasId() const;
  inline  ::BufID::Reader getId() const;

  inline bool hasContents() const;
  inline  ::capnp::Data::Reader getContents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BufStruct::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(BufStruct::Reader reader) {
  return ::capnp::_::structString<BufStruct>(reader._reader);
}

class BufStruct::Builder {
public:
  typedef BufStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasId();
  inline  ::BufID::Builder getId();
  inline void setId( ::BufID::Reader value);
  inline  ::BufID::Builder initId();
  inline void adoptId(::capnp::Orphan< ::BufID>&& value);
  inline ::capnp::Orphan< ::BufID> disownId();

  inline bool hasContents();
  inline  ::capnp::Data::Builder getContents();
  inline void setContents( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initContents(unsigned int size);
  inline void adoptContents(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownContents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(BufStruct::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(BufStruct::Builder builder) {
  return ::capnp::_::structString<BufStruct>(builder._builder.asReader());
}

class BufStruct::Pipeline {
public:
  typedef BufStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::BufID::Pipeline getId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

// =======================================================================================

inline bool ParamStruct::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ParamStruct::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ParamStruct::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ParamStruct::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ParamStruct::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ParamStruct::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ParamStruct::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ParamStruct::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t ParamStruct::Reader::getGuid() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParamStruct::Builder::getGuid() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Builder::setGuid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParamStruct::Reader::getChannel() const {
  return _reader.getDataField< ::uint8_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParamStruct::Builder::getChannel() {
  return _builder.getDataField< ::uint8_t>(
      8 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Builder::setChannel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline ParamStruct::Value::Reader ParamStruct::Reader::getValue() const {
  return ParamStruct::Value::Reader(_reader);
}
inline ParamStruct::Value::Builder ParamStruct::Builder::getValue() {
  return ParamStruct::Value::Builder(_builder);
}
inline ParamStruct::Value::Pipeline ParamStruct::Pipeline::getValue() {
  return ParamStruct::Value::Pipeline(_typeless.noop());
}
inline ParamStruct::Value::Builder ParamStruct::Builder::initValue() {
  _builder.setDataField< ::uint8_t>(9 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(5 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return ParamStruct::Value::Builder(_builder);
}
inline ParamStruct::Value::Which ParamStruct::Value::Reader::which() const {
  return _reader.getDataField<Which>(5 * ::capnp::ELEMENTS);
}
inline ParamStruct::Value::Which ParamStruct::Value::Builder::which() {
  return _builder.getDataField<Which>(5 * ::capnp::ELEMENTS);
}

inline bool ParamStruct::Value::Reader::isSwitch() const {
  return which() == ParamStruct::Value::SWITCH;
}
inline bool ParamStruct::Value::Builder::isSwitch() {
  return which() == ParamStruct::Value::SWITCH;
}
inline bool ParamStruct::Value::Reader::getSwitch() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::SWITCH,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      72 * ::capnp::ELEMENTS);
}

inline bool ParamStruct::Value::Builder::getSwitch() {
  KJ_IREQUIRE(which() == ParamStruct::Value::SWITCH,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      72 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setSwitch(bool value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::SWITCH);
  _builder.setDataField<bool>(
      72 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isSigned8() const {
  return which() == ParamStruct::Value::SIGNED8;
}
inline bool ParamStruct::Value::Builder::isSigned8() {
  return which() == ParamStruct::Value::SIGNED8;
}
inline  ::int8_t ParamStruct::Value::Reader::getSigned8() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int8_t ParamStruct::Value::Builder::getSigned8() {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      9 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setSigned8( ::int8_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::SIGNED8);
  _builder.setDataField< ::int8_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isSigned16() const {
  return which() == ParamStruct::Value::SIGNED16;
}
inline bool ParamStruct::Value::Builder::isSigned16() {
  return which() == ParamStruct::Value::SIGNED16;
}
inline  ::int16_t ParamStruct::Value::Reader::getSigned16() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int16_t ParamStruct::Value::Builder::getSigned16() {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      6 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setSigned16( ::int16_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::SIGNED16);
  _builder.setDataField< ::int16_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isSigned32() const {
  return which() == ParamStruct::Value::SIGNED32;
}
inline bool ParamStruct::Value::Builder::isSigned32() {
  return which() == ParamStruct::Value::SIGNED32;
}
inline  ::int32_t ParamStruct::Value::Reader::getSigned32() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t ParamStruct::Value::Builder::getSigned32() {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setSigned32( ::int32_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::SIGNED32);
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isSigned64() const {
  return which() == ParamStruct::Value::SIGNED64;
}
inline bool ParamStruct::Value::Builder::isSigned64() {
  return which() == ParamStruct::Value::SIGNED64;
}
inline  ::int64_t ParamStruct::Value::Reader::getSigned64() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int64_t ParamStruct::Value::Builder::getSigned64() {
  KJ_IREQUIRE(which() == ParamStruct::Value::SIGNED64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setSigned64( ::int64_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::SIGNED64);
  _builder.setDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isUnsigned8() const {
  return which() == ParamStruct::Value::UNSIGNED8;
}
inline bool ParamStruct::Value::Builder::isUnsigned8() {
  return which() == ParamStruct::Value::UNSIGNED8;
}
inline  ::uint8_t ParamStruct::Value::Reader::getUnsigned8() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint8_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParamStruct::Value::Builder::getUnsigned8() {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint8_t>(
      9 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setUnsigned8( ::uint8_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::UNSIGNED8);
  _builder.setDataField< ::uint8_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isUnsigned16() const {
  return which() == ParamStruct::Value::UNSIGNED16;
}
inline bool ParamStruct::Value::Builder::isUnsigned16() {
  return which() == ParamStruct::Value::UNSIGNED16;
}
inline  ::uint16_t ParamStruct::Value::Reader::getUnsigned16() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint16_t ParamStruct::Value::Builder::getUnsigned16() {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      6 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setUnsigned16( ::uint16_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::UNSIGNED16);
  _builder.setDataField< ::uint16_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isUnsigned32() const {
  return which() == ParamStruct::Value::UNSIGNED32;
}
inline bool ParamStruct::Value::Builder::isUnsigned32() {
  return which() == ParamStruct::Value::UNSIGNED32;
}
inline  ::uint32_t ParamStruct::Value::Reader::getUnsigned32() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t ParamStruct::Value::Builder::getUnsigned32() {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setUnsigned32( ::uint32_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::UNSIGNED32);
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isUnsigned64() const {
  return which() == ParamStruct::Value::UNSIGNED64;
}
inline bool ParamStruct::Value::Builder::isUnsigned64() {
  return which() == ParamStruct::Value::UNSIGNED64;
}
inline  ::uint64_t ParamStruct::Value::Reader::getUnsigned64() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParamStruct::Value::Builder::getUnsigned64() {
  KJ_IREQUIRE(which() == ParamStruct::Value::UNSIGNED64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setUnsigned64( ::uint64_t value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::UNSIGNED64);
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isFloatNum() const {
  return which() == ParamStruct::Value::FLOAT_NUM;
}
inline bool ParamStruct::Value::Builder::isFloatNum() {
  return which() == ParamStruct::Value::FLOAT_NUM;
}
inline float ParamStruct::Value::Reader::getFloatNum() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::FLOAT_NUM,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float ParamStruct::Value::Builder::getFloatNum() {
  KJ_IREQUIRE(which() == ParamStruct::Value::FLOAT_NUM,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setFloatNum(float value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::FLOAT_NUM);
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isDoubleNum() const {
  return which() == ParamStruct::Value::DOUBLE_NUM;
}
inline bool ParamStruct::Value::Builder::isDoubleNum() {
  return which() == ParamStruct::Value::DOUBLE_NUM;
}
inline double ParamStruct::Value::Reader::getDoubleNum() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::DOUBLE_NUM,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}

inline double ParamStruct::Value::Builder::getDoubleNum() {
  KJ_IREQUIRE(which() == ParamStruct::Value::DOUBLE_NUM,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setDoubleNum(double value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::DOUBLE_NUM);
  _builder.setDataField<double>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool ParamStruct::Value::Reader::isStringVal() const {
  return which() == ParamStruct::Value::STRING_VAL;
}
inline bool ParamStruct::Value::Builder::isStringVal() {
  return which() == ParamStruct::Value::STRING_VAL;
}
inline bool ParamStruct::Value::Reader::hasStringVal() const {
  if (which() != ParamStruct::Value::STRING_VAL) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ParamStruct::Value::Builder::hasStringVal() {
  if (which() != ParamStruct::Value::STRING_VAL) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ParamStruct::Value::Reader::getStringVal() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::STRING_VAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ParamStruct::Value::Builder::getStringVal() {
  KJ_IREQUIRE(which() == ParamStruct::Value::STRING_VAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ParamStruct::Value::Builder::setStringVal( ::capnp::Text::Reader value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::STRING_VAL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ParamStruct::Value::Builder::initStringVal(unsigned int size) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::STRING_VAL);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ParamStruct::Value::Builder::adoptStringVal(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::STRING_VAL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ParamStruct::Value::Builder::disownStringVal() {
  KJ_IREQUIRE(which() == ParamStruct::Value::STRING_VAL,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ParamStruct::Value::Reader::isRequest() const {
  return which() == ParamStruct::Value::REQUEST;
}
inline bool ParamStruct::Value::Builder::isRequest() {
  return which() == ParamStruct::Value::REQUEST;
}
inline  ::capnp::Void ParamStruct::Value::Reader::getRequest() const {
  KJ_IREQUIRE(which() == ParamStruct::Value::REQUEST,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ParamStruct::Value::Builder::getRequest() {
  KJ_IREQUIRE(which() == ParamStruct::Value::REQUEST,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void ParamStruct::Value::Builder::setRequest( ::capnp::Void value) {
  _builder.setDataField<ParamStruct::Value::Which>(
      5 * ::capnp::ELEMENTS, ParamStruct::Value::REQUEST);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool IntStruct::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool IntStruct::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IntStruct::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IntStruct::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void IntStruct::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IntStruct::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void IntStruct::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IntStruct::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t IntStruct::Reader::getGuid() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t IntStruct::Builder::getGuid() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void IntStruct::Builder::setGuid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t IntStruct::Reader::getChannel() const {
  return _reader.getDataField< ::uint8_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint8_t IntStruct::Builder::getChannel() {
  return _builder.getDataField< ::uint8_t>(
      8 * ::capnp::ELEMENTS);
}
inline void IntStruct::Builder::setChannel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool BufID::Reader::hasChannels() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BufID::Builder::hasChannels() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t>::Reader BufID::Reader::getChannels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t>::Builder BufID::Builder::getChannels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BufID::Builder::setChannels( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void BufID::Builder::setChannels(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t>::Builder BufID::Builder::initChannels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void BufID::Builder::adoptChannels(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> BufID::Builder::disownChannels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline float BufID::Reader::getRate() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float BufID::Builder::getRate() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setRate(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t BufID::Reader::getStartTime() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t BufID::Builder::getStartTime() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setStartTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t BufID::Reader::getSize() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t BufID::Builder::getSize() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BufID::Reader::getResolution() const {
  return _reader.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint8_t BufID::Builder::getResolution() {
  return _builder.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setResolution( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline bool BufID::Reader::getDirection() const {
  return _reader.getDataField<bool>(
      136 * ::capnp::ELEMENTS);
}

inline bool BufID::Builder::getDirection() {
  return _builder.getDataField<bool>(
      136 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setDirection(bool value) {
  _builder.setDataField<bool>(
      136 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t BufID::Reader::getContentSize() const {
  return _reader.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint32_t BufID::Builder::getContentSize() {
  return _builder.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setContentSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BufID::Reader::getBufNum() const {
  return _reader.getDataField< ::uint8_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::uint8_t BufID::Builder::getBufNum() {
  return _builder.getDataField< ::uint8_t>(
      18 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setBufNum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline bool BufID::Reader::getActive() const {
  return _reader.getDataField<bool>(
      137 * ::capnp::ELEMENTS);
}

inline bool BufID::Builder::getActive() {
  return _builder.getDataField<bool>(
      137 * ::capnp::ELEMENTS);
}
inline void BufID::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      137 * ::capnp::ELEMENTS, value);
}

inline bool BufStruct::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BufStruct::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::BufID::Reader BufStruct::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::BufID>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::BufID::Builder BufStruct::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::BufID>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::BufID::Pipeline BufStruct::Pipeline::getId() {
  return  ::BufID::Pipeline(_typeless.getPointerField(0));
}
inline void BufStruct::Builder::setId( ::BufID::Reader value) {
  ::capnp::_::PointerHelpers< ::BufID>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::BufID::Builder BufStruct::Builder::initId() {
  return ::capnp::_::PointerHelpers< ::BufID>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void BufStruct::Builder::adoptId(
    ::capnp::Orphan< ::BufID>&& value) {
  ::capnp::_::PointerHelpers< ::BufID>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::BufID> BufStruct::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::BufID>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BufStruct::Reader::hasContents() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool BufStruct::Builder::hasContents() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader BufStruct::Reader::getContents() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder BufStruct::Builder::getContents() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void BufStruct::Builder::setContents( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder BufStruct::Builder::initContents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void BufStruct::Builder::adoptContents(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> BufStruct::Builder::disownContents() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_f7d61418b03bac29_
